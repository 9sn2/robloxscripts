--[[
Thank you for using Volleyball 4.2 with the renewal made by czerval.

MODE FUNCTIONALITIES:
Setting: Auto setting mode points towards the antennas on both sides when you set up the ball using the forward and backward setup key.
Aim Bot: Adjusts the orientation and movements of the player character to ensure accurate aiming.
Prediction: Shows a bubble indicating where the ball will be. (predicts the movement of the ball)
Line Fault: While this is enabled, you cannot experience a line fault.

For any inquiries, feel free to contact me on Discord: cerval. I'm here to assist with any questions you may have! 
DM: czerval

]]--

-- Settings you can change:
local setForward = "f" - Your key combination set forward (DEFAULT: F)
local setBackwards = "r" - Your configured backwards keybind (DEFAULT: R)

-- If using a number, ensure it's written as a string:
-- Example:
-- local setForward = "2" -- Sets forward key to number 2
-- local setBackwards = "3" -- Sets backwards key to number 3

local dev = false

local UserInputService = game:GetService("UserInputService")
local player = game.Players.LocalPlayer
local setting = true
local jumpMode = false
local visualizeBall = true


local function lookAt(chr, target) 
    if chr.PrimaryPart then 
        local frame = CFrame.new(chr.PrimaryPart.Position, target.Position)
        chr:SetPrimaryPartCFrame(frame)
    end
end


local function lookAway(chr, target) 
    if chr.PrimaryPart then 
        local frame = CFrame.new(chr.PrimaryPart.Position, target.Position)
        chr:SetPrimaryPartCFrame(frame)
        chr.HumanoidRootPart.CFrame *= CFrame.Angles(0, math.rad(180), 0)
    end
end


local left = Instance.new("Part")
local right = Instance.new("Part")
left.Name = "Left"
right.Name = "Right"
left.Transparency = 1
right.Transparency = 1
left.Position = Vector3.new(-23.789, 8, 0.007)
right.Position = Vector3.new(23.783, 8, -0.006)
left.Size = Vector3.new(1.607, 1, 2)
right.Size = Vector3.new(1.607, 1, 2)
left.CanCollide = false
right.CanCollide = false
left.Anchored = true
right.Anchored = true
left.Parent = workspace
right.Parent = workspace

-- inputs 
if dev then print("setting uis to be done") end
UserInputService.InputBegan:Connect(function(input, event)
    if not setting then return end

    if input.KeyCode == Enum.KeyCode[setForward] then
        if player.TeamColor == BrickColor.new("Really blue") then
            lookAt(player.Character, left)
        else
            lookAt(player.Character, right)
        end
    end

    if input.KeyCode == Enum.KeyCode[setBackwards] then
        if player.TeamColor == BrickColor.new("Really red") then
            lookAway(player.Character, left)
        else
            lookAway(player.Character, right)
        end
    end
end)


local function makeCharacterLookAtCamera()
    local player = game.Players.LocalPlayer
    local character = player.Character
    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            
            local currentWalkSpeed = humanoid.WalkSpeed
            humanoid.WalkSpeed = currentWalkSpeed * 1.3  
            
            local Camera = workspace.CurrentCamera
            local X, Y, Z = Camera.CFrame:ToOrientation()
            character.HumanoidRootPart.CFrame = CFrame.new(character.HumanoidRootPart.Position) * CFrame.Angles(X, Y, Z)
        end
    end
end


local function onJumpRequest()
    if not jumpMode then return end
    print("A")
    makeCharacterLookAtCamera()


    local player = game.Players.LocalPlayer
    local character = player.Character
    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.Jumping:Connect(function()
                UserInputService.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition
            end)

            humanoid.StateChanged:Connect(function(_, newState)
                if newState == Enum.HumanoidStateType.Freefall or newState == Enum.HumanoidStateType.Jumping then
                    UserInputService.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition
                else
                    UserInputService.MouseBehavior = Enum.MouseBehavior.Default
                end
            end)
        end
    end
end

UserInputService.JumpRequest:Connect(onJumpRequest)

game.Workspace.ServeLF.Size = Vector3.new(0.001, 1, 0.001)

repeat wait() until workspace:FindFirstChild("Ball")


local RunService = game:GetService("RunService")


local Marker = Instance.new("Part")
Marker.Name = "Marker"
Marker.Size = Vector3.new(2, 2, 2)
Marker.Shape = Enum.PartType.Ball
Marker.BrickColor = BrickColor.new("Bright violet")
Marker.CanCollide = false
Marker.Anchored = true
Marker.Parent = workspace
Marker.Transparency = 1
Marker.Material = Enum.Material.Neon

-- Physics
local function PHYSICS_STUFF(velocity, position)
    local acceleration = -workspace.Gravity
    local timeToLand = (-velocity.y - math.sqrt(velocity.y * velocity.y - 4 * 0.5 * acceleration * position.y)) / (2 * 0.5 * acceleration)
    local horizontalVelocity = Vector3.new(velocity.x, 0, velocity.z)
    local landingPosition = position + horizontalVelocity * timeToLand + Vector3.new(0, -position.y, 0)
    return landingPosition
end

-- Construct
RunService:BindToRenderStep("VisualizeLandingPosition", Enum.RenderPriority.Camera.Value, function()
    if visualizeBall then
        Marker.Transparency = 0.5
        for _, ballModel in ipairs(workspace:GetChildren()) do
            if ballModel:IsA("Model") and ballModel.Name == "Ball" then
                local ball = ballModel:FindFirstChild("BallPart")
                if ball then
                    local initialVelocity = ballModel.Velocity
                    local landingPosition = PHYSICS_STUFF(initialVelocity.Value, ball.Position)
                    Marker.CFrame = CFrame.new(landingPosition)
                end
            end
        end
    else
        Marker.Transparency = 1
    end
end)


local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = game.Players.LocalPlayer.PlayerGui

local TextLabel = Instance.new("TextLabel")
TextLabel.Size = UDim2.new(0, 200, 0, 50)
TextLabel.Position = UDim2.new(0.5, -100, 0.5, -25)
TextLabel.Text = "The script runs successfully!"
TextLabel.TextColor3 = Color3.new(1, 1, 1)
TextLabel.BackgroundTransparency = 0.5
TextLabel.BackgroundColor3 = Color3.new(0, 0, 0)
TextLabel.Font = Enum.Font.SourceSansBold
TextLabel.TextScaled = true

TextLabel.Parent = ScreenGui

wait(3) 
TextLabel:Destroy()


local buttonSize = UDim2.new(0, 200, 0, 50)

local setButton = Instance.new("TextButton")
setButton.Size = buttonSize
setButton.Position = UDim2.new(0, 10, 0, 10)
setButton.Text = "Toggle Set Mode"
setButton.Parent = ScreenGui
setButton.MouseButton1Click:Connect(function()
    setting = not setting
    setButton.Text = setting and "Set Mode: ON" or "Set Mode: OFF"
end)

local jumpButton = Instance.new("TextButton")
jumpButton.Size = buttonSize
jumpButton.Position = UDim2.new(0, 10, 0, 70)
jumpButton.Text = "Toggle Jump Mode"
jumpButton.Parent = ScreenGui
jumpButton.MouseButton1Click:Connect(function()
    jumpMode = not jumpMode
    jumpButton.Text = jumpMode and "Jump Mode: ON" or "Jump Mode: OFF"
end)

local visualizeButton = Instance.new("TextButton")
visualizeButton.Size = buttonSize
visualizeButton.Position = UDim2.new(0, 10, 0, 130)
visualizeButton.Text = "Toggle Visualize Ball"
visualizeButton.Parent = ScreenGui
visualizeButton.MouseButton1Click:Connect(function()
    visualizeBall = not visualizeBall
    visualizeButton.Text = visualizeBall and "Visualize Ball: ON" or "Visualize Ball: OFF"
end)
--]]

--[[
Setting: Auto setting mode points towards the antennas on both sides when you set up the ball using the forward and backward setup key.
Aim Bot: Adjusts the orientation and movements of the player character to ensure accurate aiming.
Prediction: Shows a bubble indicating where the ball will be. (predicts the movement of the ball)
Line Fault: While this is enabled, you cannot experience a line fault.
For any suggestions, please reach out to me privately on Discord at czerval. I look forward to hearing from you!
]]--
